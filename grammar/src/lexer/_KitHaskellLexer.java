/* The following code was generated by JFlex 1.5.1 */

package lexer;

import java.util.*;
import com.intellij.lexer.*;
import com.intellij.psi.*;
import com.intellij.psi.tree.IElementType;
import generated.GeneratedTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.1
 * from the specification file <tt>/Users/atsky/work/haskell-idea-plugin/grammar/src/lexer/Haskell.flex</tt>
 */
class _KitHaskellLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int BLOCK_COMMENT = 2;
  public static final int TEX = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\3\0\1\4\1\0\1\1\3\0\1\1\1\2\1\70\1\1\1\1"+
    "\22\0\1\1\1\0\1\5\1\0\1\0\1\0\1\23\1\15\1\71"+
    "\1\72\1\0\1\0\1\0\1\60\1\73\1\0\1\12\1\52\1\52"+
    "\1\52\1\52\3\12\2\3\1\0\1\0\1\0\1\74\2\0\1\21"+
    "\1\42\1\45\1\43\1\14\1\40\1\46\1\55\1\35\1\51\1\10"+
    "\1\44\1\32\1\54\1\30\1\34\1\51\1\41\1\50\1\33\1\36"+
    "\1\31\1\47\1\10\1\37\1\53\1\10\1\21\1\20\1\21\1\22"+
    "\1\11\1\0\1\27\1\61\1\13\1\17\1\62\1\25\1\63\1\102"+
    "\1\64\2\7\1\76\1\16\1\65\1\56\1\101\1\106\1\26\1\75"+
    "\1\77\1\100\1\24\1\104\1\57\1\105\1\7\1\66\1\0\1\67"+
    "\1\0\6\0\1\70\33\0\11\0\1\7\2\0\1\0\4\0\2\0"+
    "\1\0\1\7\3\0\1\0\1\7\1\0\3\0\1\0\27\6\1\0"+
    "\7\6\30\7\1\0\10\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\2\7"+
    "\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\1\7\1\6\2\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\2\6\1\7\1\6\1\7\1\6\3\7\2\6\1\7"+
    "\1\6\1\7\2\6\1\7\3\6\2\7\4\6\1\7\2\6\1\7"+
    "\3\6\3\7\2\6\1\7\2\6\1\7\1\6\1\7\1\6\1\7"+
    "\2\6\1\7\1\6\2\7\1\6\1\7\2\6\1\7\3\6\1\7"+
    "\1\6\1\7\2\6\2\7\1\0\1\6\3\7\4\0\1\6\1\0"+
    "\1\7\1\6\1\0\1\7\1\6\1\0\1\7\1\6\1\7\1\6"+
    "\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6"+
    "\1\7\1\6\2\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6"+
    "\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6"+
    "\2\7\1\6\1\0\1\7\1\6\1\7\3\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\1\7\1\6\7\7\2\6\1\7\2\6\2\7"+
    "\1\6\1\7\4\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\105\7\1\0\44\7\7\0\2\7\4\0\14\0\16\0\5\7"+
    "\7\0\1\0\1\0\1\0\21\0\105\0\1\7\52\0\1\6\1\7"+
    "\1\6\1\7\1\0\1\0\1\6\1\7\2\0\4\7\1\0\5\0"+
    "\2\0\1\6\1\0\3\6\1\0\1\6\1\0\2\6\1\7\21\6"+
    "\1\0\11\6\43\7\1\6\2\7\3\6\3\7\1\6\1\7\1\6"+
    "\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6"+
    "\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6"+
    "\5\7\1\6\1\7\1\0\1\6\1\7\2\6\2\7\63\6\60\7"+
    "\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\1\7\1\0\7\0\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\2\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\2\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\11\0\46\6\3\0\6\0\1\0\47\7\1\0\2\0"+
    "\4\0\1\0\56\0\1\0\1\0\1\0\2\0\1\0\2\0\1\0"+
    "\54\0\2\0\21\0\12\0\13\0\1\0\2\0\2\0\112\0\4\0"+
    "\146\0\1\0\11\0\1\0\12\0\1\0\23\0\2\0\1\0\16\0"+
    "\350\0\4\0\66\0\17\0\37\0\1\0\u0105\0\2\0\12\0\1\0"+
    "\201\0\2\0\6\0\2\0\364\0\2\0\176\0\1\0\202\0\10\0"+
    "\204\0\1\0\371\0\1\0\172\0\1\0\112\0\1\0\17\0\1\0"+
    "\12\0\2\0\245\0\27\0\2\0\6\0\24\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\4\0\107\0\1\0\70\0\10\0\1\0\6\0"+
    "\1\0\15\0\157\0\6\0\116\0\2\0\46\6\1\0\1\6\5\0"+
    "\1\6\55\0\1\0\u0264\0\11\0\47\0\12\0\146\0\1\0\u026c\0"+
    "\2\0\54\0\2\0\116\0\3\0\107\0\2\0\235\0\3\0\1\0"+
    "\4\0\44\0\13\0\u0135\0\1\0\3\0\2\0\230\0\42\0\36\0"+
    "\2\0\200\0\7\0\1\0\6\0\254\0\21\0\11\0\11\0\177\0"+
    "\4\0\73\0\5\0\76\0\2\0\100\0\10\0\13\0\1\0\54\0"+
    "\300\7\100\0\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\11\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\11\7"+
    "\10\6\6\7\2\0\6\6\2\0\10\7\10\6\10\7\10\6\6\7"+
    "\2\0\6\6\2\0\10\7\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\10\7\10\6\16\7\2\0\10\7\10\0\10\7\10\0"+
    "\10\7\10\0\5\7\1\0\2\7\4\6\1\0\1\0\1\7\3\0"+
    "\3\7\1\0\2\7\4\6\1\0\3\0\4\7\2\0\2\7\4\6"+
    "\1\0\3\0\10\7\5\6\3\0\2\0\3\7\1\0\2\7\4\6"+
    "\1\0\2\0\21\0\30\0\1\70\1\70\6\0\57\0\22\0\1\7"+
    "\10\0\5\0\1\7\12\0\5\0\1\0\15\7\3\0\33\0\105\0"+
    "\2\0\1\6\4\0\1\6\2\0\1\7\3\6\2\7\3\6\1\7"+
    "\1\0\1\6\3\0\5\6\6\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\1\7\4\6\1\7\4\0\1\7\2\0\2\7"+
    "\2\6\5\0\1\6\4\7\4\0\1\7\1\0\20\0\20\6\20\7"+
    "\3\0\1\6\1\7\13\0\160\0\1\103\u01f3\0\14\0\47\0\31\0"+
    "\13\0\121\0\32\0\32\6\32\7\26\0\u0200\0\1\0\165\0\36\0"+
    "\u03b9\0\3\0\12\0\246\0\57\6\1\0\57\7\1\0\1\6\1\7"+
    "\3\6\2\7\1\6\1\7\1\6\1\7\1\6\1\7\4\6\1\7"+
    "\1\6\2\7\1\6\10\7\3\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\2\7\6\0\1\6\1\7\1\6\1\7\3\0"+
    "\1\6\1\7\5\0\4\0\1\0\2\0\46\7\1\0\1\7\5\0"+
    "\1\7\102\0\1\0\217\0\57\0\1\0\14\0\104\0\32\0\1\0"+
    "\131\0\14\0\326\0\32\0\14\0\5\0\4\0\3\0\31\0\17\0"+
    "\1\0\5\0\2\0\5\0\3\0\133\0\2\0\3\0\1\0\132\0"+
    "\1\0\224\0\2\0\4\0\12\0\40\0\44\0\34\0\37\0\13\0"+
    "\36\0\10\0\1\0\17\0\40\0\12\0\47\0\17\0\77\0\1\0"+
    "\u0100\0\u19c0\0\100\0\u5690\0\67\0\67\0\2\0\u010d\0\3\0\60\0"+
    "\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\1\6\1\7\1\6\1\7\5\0\1\0\12\0\1\0"+
    "\1\0\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6"+
    "\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6"+
    "\1\7\1\6\1\7\1\6\1\7\132\0\6\0\10\0\27\0\11\0"+
    "\2\0\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6"+
    "\1\7\1\6\1\7\1\6\3\7\1\6\1\7\1\6\1\7\1\6"+
    "\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6"+
    "\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6"+
    "\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6"+
    "\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6"+
    "\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6"+
    "\1\7\1\6\1\7\1\6\1\7\1\6\12\7\1\6\1\7\1\6"+
    "\1\7\2\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6"+
    "\1\7\1\0\2\0\1\6\1\7\1\6\1\7\1\0\1\6\1\7"+
    "\1\6\1\7\14\0\1\6\1\7\1\6\1\7\1\6\1\7\1\6"+
    "\1\7\1\6\1\7\1\6\115\0\3\7\55\0\4\0\12\0\4\0"+
    "\72\0\4\0\126\0\2\0\50\0\3\0\63\0\2\0\57\0\1\0"+
    "\141\0\15\0\20\0\2\0\174\0\4\0\27\0\3\0\144\0\2\0"+
    "\20\0\2\0\371\0\1\0\u4f14\0\7\7\14\0\5\7\21\0\1\0"+
    "\210\0\20\0\u017c\0\2\0\274\0\2\0\22\0\12\0\26\0\43\0"+
    "\1\0\23\0\1\0\4\0\225\0\17\0\12\0\7\0\32\6\6\0"+
    "\32\7\13\0\172\0\7\0\1\0\7\0\15\0\2\0\2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\2\1\5\2\6"+
    "\1\2\10\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\5\6\1\15\2\6\3\16\2\1\1\0\1\17\1\0"+
    "\2\6\2\0\2\6\1\20\2\6\1\21\1\22\3\6"+
    "\1\23\1\24\1\6\1\25\10\6\1\26\1\27\1\1"+
    "\20\0\2\6\1\30\17\0\14\6\1\31\6\6\13\0"+
    "\1\32\1\6\15\0\1\6\1\33\5\6\1\34\4\6"+
    "\1\35\1\36\1\37\4\6\1\0\1\40\7\6\1\41"+
    "\4\6\1\42\1\6\1\0\1\43\2\6\1\15\1\6"+
    "\1\44\1\45\1\46\1\47\2\6\1\50\1\51\1\6"+
    "\1\0\1\52\1\6\1\53\1\6\1\54\1\6\1\0"+
    "\1\55\1\56\1\6\1\0\1\57\3\0\1\60";

  private static int [] zzUnpackAction() {
    int [] result = new int[216];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\325\0\u011c\0\325\0\u0163\0\u01aa"+
    "\0\u01f1\0\u0238\0\u027f\0\u02c6\0\u030d\0\u0354\0\u039b\0\u03e2"+
    "\0\u0429\0\u0470\0\u04b7\0\u04fe\0\325\0\325\0\325\0\325"+
    "\0\325\0\u0545\0\u058c\0\u05d3\0\u061a\0\u0661\0\325\0\u06a8"+
    "\0\u06ef\0\325\0\u0736\0\u077d\0\u07c4\0\u080b\0\u0163\0\325"+
    "\0\u0852\0\u0899\0\u08e0\0\u0927\0\u096e\0\u09b5\0\u09fc\0\u01f1"+
    "\0\u0a43\0\u0a8a\0\u01f1\0\u01f1\0\u0ad1\0\u0b18\0\u0b5f\0\u01f1"+
    "\0\u0ba6\0\u0bed\0\325\0\u0c34\0\u0c7b\0\u0cc2\0\u0d09\0\u0d50"+
    "\0\u0d97\0\u0dde\0\u0e25\0\325\0\325\0\u0e6c\0\u0eb3\0\u0efa"+
    "\0\u0f41\0\u0f88\0\u0fcf\0\u1016\0\u105d\0\u10a4\0\u10eb\0\u1132"+
    "\0\u1179\0\u11c0\0\u1207\0\u124e\0\u1295\0\u12dc\0\u1323\0\u136a"+
    "\0\325\0\u13b1\0\u13f8\0\u143f\0\u1486\0\u14cd\0\u1514\0\u155b"+
    "\0\u15a2\0\u15e9\0\u1630\0\u1677\0\u16be\0\u1705\0\u174c\0\u1793"+
    "\0\u17da\0\u1821\0\u1868\0\u18af\0\u18f6\0\u193d\0\u1984\0\u19cb"+
    "\0\u1a12\0\u1a59\0\u1aa0\0\u1ae7\0\u01f1\0\u1b2e\0\u1b75\0\u1bbc"+
    "\0\u1c03\0\u1c4a\0\u1c91\0\u1cd8\0\u1d1f\0\u1d66\0\u1dad\0\u1df4"+
    "\0\u1e3b\0\u1e82\0\u1ec9\0\u1f10\0\u1f57\0\u1f9e\0\u01f1\0\u1fe5"+
    "\0\u202c\0\u2073\0\u20ba\0\u2101\0\u2148\0\u218f\0\u21d6\0\u221d"+
    "\0\u2264\0\u22ab\0\u22f2\0\u2339\0\u2380\0\u23c7\0\u01f1\0\u240e"+
    "\0\u2455\0\u249c\0\u24e3\0\u252a\0\u01f1\0\u2571\0\u25b8\0\u25ff"+
    "\0\u2646\0\u01f1\0\u01f1\0\u01f1\0\u268d\0\u26d4\0\u271b\0\u2762"+
    "\0\u27a9\0\u01f1\0\u27f0\0\u2837\0\u287e\0\u28c5\0\u290c\0\u2953"+
    "\0\u299a\0\u29e1\0\u2a28\0\u2a6f\0\u2ab6\0\u2afd\0\u01f1\0\u2b44"+
    "\0\u2b8b\0\u01f1\0\u2bd2\0\u2c19\0\u01f1\0\u2c60\0\u01f1\0\u01f1"+
    "\0\u01f1\0\u01f1\0\u2ca7\0\u2cee\0\u01f1\0\u01f1\0\u2d35\0\u2d7c"+
    "\0\u01f1\0\u2dc3\0\u01f1\0\u2e0a\0\u01f1\0\u2e51\0\u2e98\0\u01f1"+
    "\0\u01f1\0\u2edf\0\u2f26\0\u01f1\0\u2f6d\0\u2fb4\0\u2ffb\0\325";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[216];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\2\4\1\7\1\10\1\11\1\10"+
    "\1\11\1\4\1\12\1\10\1\13\1\14\1\15\4\4"+
    "\1\11\1\16\1\11\1\17\22\10\1\4\3\10\1\20"+
    "\1\11\1\4\1\11\1\21\1\11\1\22\1\23\1\24"+
    "\1\25\1\0\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\11\1\36\1\37\1\40\1\11\1\41"+
    "\60\42\1\43\5\42\1\44\1\42\1\0\16\42\20\45"+
    "\1\46\66\45\110\0\1\5\105\0\2\47\1\50\2\47"+
    "\1\50\12\47\1\51\66\47\3\0\2\10\1\0\12\10"+
    "\4\0\34\10\1\0\5\10\7\0\6\10\1\0\3\10"+
    "\3\0\2\11\1\0\12\11\4\0\34\11\1\0\5\11"+
    "\7\0\6\11\1\0\3\11\3\0\2\11\1\0\12\11"+
    "\4\0\3\11\1\52\30\11\1\0\5\11\7\0\1\11"+
    "\1\53\4\11\1\0\3\11\2\54\1\0\12\54\1\0"+
    "\2\54\1\55\66\54\3\0\2\11\1\0\12\11\4\0"+
    "\32\11\1\56\1\11\1\0\5\11\7\0\6\11\1\0"+
    "\3\11\3\0\2\11\1\0\12\11\4\0\3\11\1\57"+
    "\26\11\1\60\1\11\1\0\1\11\1\61\3\11\7\0"+
    "\6\11\1\0\3\11\3\0\2\11\1\0\12\11\4\0"+
    "\32\11\1\62\1\11\1\0\5\11\7\0\6\11\1\0"+
    "\3\11\3\0\2\11\1\0\12\11\4\0\34\11\1\0"+
    "\5\11\7\0\1\63\5\11\1\0\3\11\3\0\2\11"+
    "\1\0\12\11\4\0\1\11\1\64\32\11\1\0\5\11"+
    "\7\0\6\11\1\0\3\11\3\0\2\11\1\0\12\11"+
    "\4\0\33\11\1\65\1\0\5\11\7\0\1\11\1\66"+
    "\4\11\1\0\3\11\3\0\2\11\1\0\10\11\1\67"+
    "\1\11\4\0\1\11\1\70\32\11\1\0\4\11\1\71"+
    "\7\0\6\11\1\0\3\11\3\0\2\11\1\0\12\11"+
    "\4\0\34\11\1\0\1\11\1\72\3\11\7\0\6\11"+
    "\1\0\3\11\60\0\1\73\31\0\2\11\1\0\12\11"+
    "\4\0\3\11\1\74\30\11\1\0\5\11\7\0\6\11"+
    "\1\0\3\11\3\0\2\11\1\0\12\11\4\0\34\11"+
    "\1\0\1\11\1\75\3\11\7\0\6\11\1\0\3\11"+
    "\3\0\2\11\1\0\12\11\4\0\34\11\1\0\5\11"+
    "\7\0\5\11\1\76\1\0\1\11\1\77\1\11\3\0"+
    "\2\11\1\0\12\11\4\0\34\11\1\0\4\11\1\100"+
    "\7\0\6\11\1\0\3\11\3\0\2\11\1\0\12\11"+
    "\4\0\34\11\1\0\3\11\1\101\1\11\7\0\6\11"+
    "\1\0\3\11\3\0\2\11\1\0\12\11\4\0\34\11"+
    "\1\0\5\11\7\0\5\11\1\102\1\0\3\11\3\0"+
    "\2\11\1\0\12\11\4\0\34\11\1\0\5\11\7\0"+
    "\3\11\1\103\2\11\1\0\3\11\67\0\1\104\77\0"+
    "\1\105\26\0\20\45\1\0\66\45\20\0\1\106\40\0"+
    "\1\107\26\0\2\110\1\47\1\0\1\47\4\0\1\47"+
    "\1\0\1\111\1\47\2\0\1\47\1\0\1\112\5\47"+
    "\1\113\1\114\1\115\1\116\1\0\1\117\2\0\1\120"+
    "\1\0\1\121\1\122\1\0\1\123\1\124\1\117\1\114"+
    "\1\0\1\47\2\0\1\114\1\125\1\126\1\0\1\47"+
    "\3\0\1\47\11\0\1\47\12\0\2\11\1\0\12\11"+
    "\4\0\34\11\1\0\5\11\7\0\1\127\5\11\1\0"+
    "\3\11\3\0\2\11\1\0\12\11\4\0\3\11\1\130"+
    "\30\11\1\0\5\11\7\0\6\11\1\0\3\11\15\0"+
    "\1\131\74\0\1\132\1\0\1\54\4\0\1\132\1\0"+
    "\1\133\1\54\2\0\1\54\1\0\1\134\5\54\1\135"+
    "\1\136\1\137\1\140\1\0\1\141\2\0\1\142\1\0"+
    "\1\143\1\144\1\0\1\145\1\146\1\141\1\136\1\0"+
    "\1\132\2\0\1\136\1\147\1\150\1\0\1\54\3\0"+
    "\1\54\11\0\1\54\12\0\2\11\1\0\11\11\1\151"+
    "\4\0\34\11\1\0\5\11\7\0\6\11\1\0\3\11"+
    "\3\0\2\11\1\0\12\11\4\0\34\11\1\0\5\11"+
    "\7\0\2\11\1\152\3\11\1\0\3\11\3\0\2\11"+
    "\1\0\12\11\4\0\1\11\1\153\1\154\31\11\1\0"+
    "\5\11\7\0\6\11\1\0\3\11\3\0\2\11\1\0"+
    "\12\11\4\0\2\11\1\155\31\11\1\0\5\11\7\0"+
    "\6\11\1\0\3\11\3\0\2\11\1\0\12\11\4\0"+
    "\34\11\1\0\5\11\7\0\4\11\1\156\1\11\1\0"+
    "\3\11\3\0\2\11\1\0\12\11\4\0\34\11\1\0"+
    "\5\11\7\0\1\157\5\11\1\0\3\11\3\0\2\11"+
    "\1\0\12\11\4\0\34\11\1\0\5\11\7\0\4\11"+
    "\1\160\1\11\1\0\3\11\3\0\2\11\1\0\12\11"+
    "\4\0\1\11\1\161\32\11\1\0\5\11\7\0\1\162"+
    "\5\11\1\0\3\11\3\0\2\11\1\0\12\11\4\0"+
    "\34\11\1\0\5\11\7\0\6\11\1\0\1\163\2\11"+
    "\3\0\2\11\1\0\12\11\4\0\1\11\1\164\32\11"+
    "\1\0\5\11\7\0\6\11\1\0\3\11\3\0\2\11"+
    "\1\0\12\11\4\0\34\11\1\0\5\11\7\0\2\11"+
    "\1\165\3\11\1\0\3\11\3\0\2\11\1\0\12\11"+
    "\4\0\34\11\1\0\1\11\1\166\3\11\7\0\6\11"+
    "\1\0\3\11\3\0\2\11\1\0\12\11\4\0\34\11"+
    "\1\0\5\11\7\0\4\11\1\167\1\11\1\0\3\11"+
    "\3\0\2\11\1\0\12\11\4\0\34\11\1\0\5\11"+
    "\7\0\1\170\5\11\1\0\3\11\3\0\2\11\1\0"+
    "\11\11\1\171\4\0\34\11\1\0\5\11\7\0\6\11"+
    "\1\0\3\11\3\0\2\11\1\0\12\11\4\0\34\11"+
    "\1\0\1\11\1\172\3\11\7\0\6\11\1\0\3\11"+
    "\3\0\2\11\1\0\12\11\4\0\3\11\1\173\30\11"+
    "\1\0\5\11\7\0\6\11\1\0\3\11\20\0\1\106"+
    "\150\0\1\174\25\0\2\110\15\0\1\47\120\0\1\175"+
    "\5\0\1\176\2\0\1\177\53\0\2\47\2\0\1\47"+
    "\3\0\3\47\5\0\22\47\1\0\3\47\62\0\1\176"+
    "\10\0\1\200\77\0\1\47\121\0\1\47\71\0\1\201"+
    "\2\0\1\47\1\0\1\202\12\0\1\47\1\0\1\203"+
    "\71\0\1\47\100\0\1\204\2\0\1\205\1\117\1\0"+
    "\1\206\15\0\1\47\75\0\1\200\105\0\1\203\5\0"+
    "\1\47\71\0\1\47\4\0\1\176\101\0\1\47\12\0"+
    "\1\47\52\0\1\47\37\0\1\47\37\0\1\47\6\0"+
    "\3\47\2\0\1\47\5\0\1\47\1\0\1\47\10\0"+
    "\1\47\1\0\2\47\1\0\2\47\3\0\1\47\6\0"+
    "\2\47\27\0\2\11\1\0\12\11\4\0\34\11\1\0"+
    "\1\11\1\207\3\11\7\0\6\11\1\0\3\11\3\0"+
    "\2\11\1\0\12\11\4\0\34\11\1\0\5\11\7\0"+
    "\1\210\5\11\1\0\3\11\3\0\1\132\6\0\1\132"+
    "\2\0\1\131\34\0\1\132\66\0\1\211\5\0\1\212"+
    "\2\0\1\213\53\0\2\54\2\0\1\54\3\0\3\54"+
    "\5\0\22\54\1\0\3\54\62\0\1\212\10\0\1\214"+
    "\77\0\1\54\121\0\1\54\71\0\1\215\2\0\1\216"+
    "\1\0\1\217\12\0\1\54\1\0\1\220\71\0\1\54"+
    "\100\0\1\221\2\0\1\222\1\141\1\0\1\223\15\0"+
    "\1\54\75\0\1\214\105\0\1\220\5\0\1\54\71\0"+
    "\1\54\4\0\1\212\101\0\1\54\12\0\1\54\52\0"+
    "\1\224\37\0\1\224\37\0\1\225\6\0\3\225\2\0"+
    "\1\225\5\0\1\225\1\0\1\225\10\0\1\225\1\0"+
    "\2\225\1\0\2\225\3\0\1\225\6\0\2\225\27\0"+
    "\2\11\1\0\12\11\4\0\34\11\1\0\5\11\7\0"+
    "\3\11\1\226\2\11\1\0\3\11\3\0\2\11\1\0"+
    "\12\11\4\0\3\11\1\227\30\11\1\0\5\11\7\0"+
    "\6\11\1\0\3\11\3\0\2\11\1\0\12\11\4\0"+
    "\3\11\1\230\30\11\1\0\5\11\7\0\6\11\1\0"+
    "\3\11\3\0\2\11\1\0\12\11\4\0\34\11\1\0"+
    "\3\11\1\231\1\11\7\0\6\11\1\0\3\11\3\0"+
    "\2\11\1\0\12\11\4\0\3\11\1\232\30\11\1\0"+
    "\1\11\1\233\3\11\7\0\6\11\1\0\3\11\3\0"+
    "\2\11\1\0\12\11\4\0\32\11\1\234\1\11\1\0"+
    "\5\11\7\0\6\11\1\0\3\11\3\0\2\11\1\0"+
    "\12\11\4\0\34\11\1\0\1\11\1\235\3\11\7\0"+
    "\6\11\1\0\3\11\3\0\2\11\1\0\12\11\4\0"+
    "\32\11\1\236\1\11\1\0\5\11\7\0\6\11\1\0"+
    "\3\11\3\0\2\11\1\0\12\11\4\0\34\11\1\0"+
    "\3\11\1\237\1\11\7\0\6\11\1\0\3\11\3\0"+
    "\2\11\1\0\12\11\4\0\34\11\1\0\5\11\7\0"+
    "\2\11\1\240\3\11\1\0\3\11\3\0\2\11\1\0"+
    "\12\11\4\0\34\11\1\0\5\11\7\0\2\11\1\241"+
    "\3\11\1\0\3\11\3\0\2\11\1\0\12\11\4\0"+
    "\34\11\1\0\1\11\1\242\3\11\7\0\6\11\1\0"+
    "\3\11\3\0\2\11\1\0\12\11\4\0\34\11\1\0"+
    "\4\11\1\243\7\0\6\11\1\0\3\11\3\0\2\11"+
    "\1\0\12\11\4\0\34\11\1\0\1\11\1\244\3\11"+
    "\7\0\6\11\1\0\3\11\3\0\2\11\1\0\12\11"+
    "\4\0\3\11\1\245\30\11\1\0\5\11\7\0\6\11"+
    "\1\0\3\11\3\0\2\11\1\0\12\11\4\0\34\11"+
    "\1\0\3\11\1\246\1\11\7\0\6\11\1\0\3\11"+
    "\3\0\2\11\1\0\12\11\4\0\2\11\1\247\31\11"+
    "\1\0\5\11\7\0\6\11\1\0\3\11\3\0\2\11"+
    "\1\0\12\11\4\0\34\11\1\0\5\11\7\0\1\11"+
    "\1\250\4\11\1\0\3\11\63\0\1\251\63\0\1\47"+
    "\100\0\1\47\126\0\1\47\100\0\1\47\107\0\1\47"+
    "\100\0\1\47\77\0\1\47\117\0\1\47\110\0\1\47"+
    "\102\0\1\47\5\0\1\47\44\0\2\11\1\0\12\11"+
    "\4\0\34\11\1\0\5\11\7\0\1\252\5\11\1\0"+
    "\3\11\40\0\1\54\100\0\1\54\126\0\1\54\100\0"+
    "\1\54\107\0\1\54\56\0\1\131\17\0\1\54\110\0"+
    "\1\54\77\0\1\54\117\0\1\54\110\0\1\54\102\0"+
    "\1\54\5\0\1\54\53\0\1\224\2\0\1\131\34\0"+
    "\1\224\37\0\1\225\6\0\3\225\1\131\1\0\1\225"+
    "\5\0\1\225\1\0\1\225\10\0\1\225\1\0\2\225"+
    "\1\0\2\225\3\0\1\225\6\0\2\225\27\0\2\11"+
    "\1\0\12\11\4\0\34\11\1\0\5\11\7\0\1\11"+
    "\1\253\4\11\1\0\3\11\3\0\2\11\1\0\12\11"+
    "\4\0\34\11\1\0\5\11\7\0\3\11\1\254\2\11"+
    "\1\0\3\11\3\0\2\11\1\0\12\11\4\0\1\255"+
    "\33\11\1\0\5\11\7\0\6\11\1\0\3\11\3\0"+
    "\2\11\1\0\12\11\4\0\34\11\1\0\5\11\7\0"+
    "\1\11\1\256\4\11\1\0\3\11\3\0\2\11\1\0"+
    "\12\11\4\0\34\11\1\0\3\11\1\257\1\11\7\0"+
    "\6\11\1\0\3\11\3\0\2\11\1\0\12\11\4\0"+
    "\2\11\1\260\31\11\1\0\5\11\7\0\6\11\1\0"+
    "\3\11\3\0\2\11\1\0\12\11\4\0\2\11\1\261"+
    "\31\11\1\0\5\11\7\0\6\11\1\0\3\11\3\0"+
    "\2\11\1\0\12\11\4\0\33\11\1\262\1\0\5\11"+
    "\7\0\6\11\1\0\3\11\3\0\2\11\1\0\12\11"+
    "\4\0\3\11\1\263\30\11\1\0\5\11\7\0\6\11"+
    "\1\0\3\11\3\0\2\11\1\0\12\11\4\0\34\11"+
    "\1\0\5\11\7\0\6\11\1\0\1\11\1\264\1\11"+
    "\3\0\2\11\1\0\12\11\4\0\1\11\1\265\32\11"+
    "\1\0\5\11\7\0\6\11\1\0\3\11\3\0\2\11"+
    "\1\0\12\11\4\0\34\11\1\0\4\11\1\266\7\0"+
    "\6\11\1\0\3\11\3\0\2\11\1\0\12\11\4\0"+
    "\34\11\1\0\1\11\1\267\3\11\7\0\6\11\1\0"+
    "\3\11\3\0\2\11\1\0\12\11\4\0\34\11\1\0"+
    "\3\11\1\270\1\11\7\0\6\11\1\0\3\11\64\0"+
    "\1\271\25\0\2\11\1\0\12\11\4\0\34\11\1\0"+
    "\1\11\1\272\3\11\7\0\6\11\1\0\3\11\3\0"+
    "\2\11\1\0\12\11\4\0\34\11\1\0\5\11\7\0"+
    "\1\11\1\273\4\11\1\0\3\11\3\0\2\11\1\0"+
    "\12\11\4\0\34\11\1\0\3\11\1\274\1\11\7\0"+
    "\6\11\1\0\3\11\3\0\2\11\1\0\12\11\4\0"+
    "\34\11\1\0\5\11\7\0\1\11\1\275\4\11\1\0"+
    "\3\11\3\0\2\11\1\0\12\11\4\0\34\11\1\0"+
    "\2\11\1\276\2\11\7\0\6\11\1\0\3\11\3\0"+
    "\2\11\1\0\12\11\4\0\34\11\1\0\5\11\7\0"+
    "\2\11\1\277\3\11\1\0\3\11\3\0\2\11\1\0"+
    "\12\11\4\0\34\11\1\0\5\11\7\0\2\11\1\300"+
    "\3\11\1\0\3\11\3\0\2\11\1\0\12\11\4\0"+
    "\2\11\1\301\31\11\1\0\5\11\7\0\1\11\1\302"+
    "\4\11\1\0\3\11\3\0\2\11\1\0\12\11\4\0"+
    "\34\11\1\0\4\11\1\303\7\0\6\11\1\0\3\11"+
    "\3\0\2\11\1\0\12\11\4\0\34\11\1\0\5\11"+
    "\7\0\4\11\1\304\1\11\1\0\3\11\3\0\2\11"+
    "\1\0\12\11\4\0\34\11\1\0\1\11\1\305\3\11"+
    "\7\0\6\11\1\0\3\11\3\0\2\11\1\0\12\11"+
    "\4\0\34\11\1\0\2\11\1\306\2\11\7\0\6\11"+
    "\1\0\3\11\3\0\2\11\1\0\12\11\4\0\1\11"+
    "\1\307\32\11\1\0\5\11\7\0\6\11\1\0\3\11"+
    "\65\0\1\310\24\0\2\11\1\0\12\11\4\0\34\11"+
    "\1\0\5\11\7\0\2\11\1\311\3\11\1\0\3\11"+
    "\3\0\2\11\1\0\12\11\4\0\34\11\1\0\4\11"+
    "\1\312\7\0\6\11\1\0\3\11\3\0\2\11\1\0"+
    "\12\11\4\0\34\11\1\0\4\11\1\313\7\0\6\11"+
    "\1\0\3\11\3\0\2\11\1\0\5\11\1\314\4\11"+
    "\4\0\34\11\1\0\5\11\7\0\6\11\1\0\3\11"+
    "\3\0\2\11\1\0\12\11\4\0\34\11\1\0\1\11"+
    "\1\315\3\11\7\0\6\11\1\0\3\11\3\0\2\11"+
    "\1\0\12\11\4\0\34\11\1\0\3\11\1\316\1\11"+
    "\7\0\6\11\1\0\3\11\66\0\1\317\23\0\2\11"+
    "\1\0\12\11\4\0\34\11\1\0\2\11\1\320\2\11"+
    "\7\0\6\11\1\0\3\11\3\0\2\11\1\0\12\11"+
    "\4\0\34\11\1\0\1\11\1\321\3\11\7\0\6\11"+
    "\1\0\3\11\3\0\2\11\1\0\12\11\4\0\34\11"+
    "\1\0\1\11\1\322\3\11\7\0\6\11\1\0\3\11"+
    "\13\0\1\323\76\0\2\11\1\0\11\11\1\324\4\0"+
    "\34\11\1\0\5\11\7\0\6\11\1\0\3\11\56\0"+
    "\1\325\47\0\1\326\151\0\1\327\113\0\1\330\17\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12354];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\1\1\11\1\1\1\11\16\1\5\11\5\1"+
    "\1\11\2\1\1\11\4\1\1\0\1\11\1\0\2\1"+
    "\2\0\15\1\1\11\10\1\2\11\1\1\20\0\2\1"+
    "\1\11\17\0\23\1\13\0\2\1\15\0\23\1\1\0"+
    "\17\1\1\0\16\1\1\0\6\1\1\0\3\1\1\0"+
    "\1\1\3\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[216];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char[] zzBuffer = new char[0];

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    private int commentStart;
    private int commentDepth;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _KitHaskellLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _KitHaskellLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3358) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer.toString().toCharArray();
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { return GeneratedTypes.BLOCK_COMMENT;
          }
        case 49: break;
        case 2: 
          { return TokenType.BAD_CHARACTER;
          }
        case 50: break;
        case 3: 
          { return TokenType.WHITE_SPACE;
          }
        case 51: break;
        case 4: 
          { return GeneratedTypes.NEW_LINE;
          }
        case 52: break;
        case 5: 
          { return GeneratedTypes.CONID;
          }
        case 53: break;
        case 6: 
          { return GeneratedTypes.VARID;
          }
        case 54: break;
        case 7: 
          { return GeneratedTypes.OCURLY;
          }
        case 55: break;
        case 8: 
          { return GeneratedTypes.CCURLY;
          }
        case 56: break;
        case 9: 
          { return GeneratedTypes.OPAREN;
          }
        case 57: break;
        case 10: 
          { return GeneratedTypes.CPAREN;
          }
        case 58: break;
        case 11: 
          { return GeneratedTypes.DOT;
          }
        case 59: break;
        case 12: 
          { return GeneratedTypes.EQUAL;
          }
        case 60: break;
        case 13: 
          { return GeneratedTypes.FORALL;
          }
        case 61: break;
        case 14: 
          { 
          }
        case 62: break;
        case 15: 
          { return GeneratedTypes.STRING;
          }
        case 63: break;
        case 16: 
          { return GeneratedTypes.DO;
          }
        case 64: break;
        case 17: 
          { return GeneratedTypes.AS;
          }
        case 65: break;
        case 18: 
          { return GeneratedTypes.OF;
          }
        case 66: break;
        case 19: 
          { return GeneratedTypes.IF;
          }
        case 67: break;
        case 20: 
          { return GeneratedTypes.IN;
          }
        case 68: break;
        case 21: 
          { yybegin(BLOCK_COMMENT);
    commentDepth = 0;
    commentStart = getTokenStart();
          }
        case 69: break;
        case 22: 
          { if (commentDepth > 0) {
            commentDepth--;
        }
        else {
             int state = yystate();
             yybegin(YYINITIAL);
             zzStartRead = commentStart;
             return GeneratedTypes.BLOCK_COMMENT;
        }
          }
        case 70: break;
        case 23: 
          { commentDepth++;
          }
        case 71: break;
        case 24: 
          { return GeneratedTypes.CHAR;
          }
        case 72: break;
        case 25: 
          { return GeneratedTypes.LET;
          }
        case 73: break;
        case 26: 
          { return GeneratedTypes.CASE;
          }
        case 74: break;
        case 27: 
          { return GeneratedTypes.DATA;
          }
        case 75: break;
        case 28: 
          { return GeneratedTypes.ELSE;
          }
        case 76: break;
        case 29: 
          { return GeneratedTypes.SAFE;
          }
        case 77: break;
        case 30: 
          { return GeneratedTypes.THEN;
          }
        case 78: break;
        case 31: 
          { return GeneratedTypes.TYPE;
          }
        case 79: break;
        case 32: 
          { return GeneratedTypes.CLASS;
          }
        case 80: break;
        case 33: 
          { return GeneratedTypes.INFIX;
          }
        case 81: break;
        case 34: 
          { return GeneratedTypes.WHERE;
          }
        case 82: break;
        case 35: 
          { return GeneratedTypes.MODULE_T;
          }
        case 83: break;
        case 36: 
          { return GeneratedTypes.EXPORT;
          }
        case 84: break;
        case 37: 
          { return GeneratedTypes.IMPORT;
          }
        case 85: break;
        case 38: 
          { return GeneratedTypes.INFIXR;
          }
        case 86: break;
        case 39: 
          { return GeneratedTypes.INFIXL;
          }
        case 87: break;
        case 40: 
          { return GeneratedTypes.UNSAFE;
          }
        case 88: break;
        case 41: 
          { return GeneratedTypes.HIDING;
          }
        case 89: break;
        case 42: 
          { return GeneratedTypes.DEFAULT;
          }
        case 90: break;
        case 43: 
          { return GeneratedTypes.FOREIGN;
          }
        case 91: break;
        case 44: 
          { return GeneratedTypes.NEWTYPE;
          }
        case 92: break;
        case 45: 
          { return GeneratedTypes.DERIVING;
          }
        case 93: break;
        case 46: 
          { return GeneratedTypes.INSTANCE;
          }
        case 94: break;
        case 47: 
          { return GeneratedTypes.QUALIFIED;
          }
        case 95: break;
        case 48: 
          { yybegin(YYINITIAL); return GeneratedTypes.BLOCK_COMMENT;
          }
        case 96: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case BLOCK_COMMENT: {
              int state = yystate();
        yybegin(YYINITIAL);
        zzStartRead = commentStart;
        return GeneratedTypes.BLOCK_COMMENT;
            }
            case 217: break;
            default:
            return null;
            }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
